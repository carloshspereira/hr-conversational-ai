#!/usr/bin/env python3
"""
Script de debug para testar a funcionalidade de entrevista
"""

import asyncio
import json
from datetime import datetime

async def test_interview_setup():
    """Testa o setup de entrevista"""
    
    # Simula dados de setup
    setup_data = {
        "setup": {
            "job_vacancy_id": "507f1f77bcf86cd799439011",  # ID de exemplo
            "interview_id": "507f1f77bcf86cd799439012",
            "candidate_id": "507f1f77bcf86cd799439013"
        }
    }
    
    print("üß™ Testando setup de entrevista...")
    print(f"Setup data: {json.dumps(setup_data, indent=2)}")
    
    # Simula perguntas que seriam encontradas no banco
    mock_questions = [
        {
            "question": "Qual √© o seu nome completo?",
            "tag": "nome_completo",
            "active": True
        },
        {
            "question": "Quantos anos de experi√™ncia voc√™ tem na √°rea?",
            "tag": "experiencia",
            "active": True
        },
        {
            "question": "Por que voc√™ quer trabalhar nesta empresa?",
            "tag": "motivacao",
            "active": True
        }
    ]
    
    print(f"üìù Perguntas mock: {len(mock_questions)}")
    for i, q in enumerate(mock_questions, 1):
        print(f"  {i}. {q['question']} (tag: {q['tag']})")
    
    # Simula o contexto que seria gerado
    interview_questions = [q["question"] for q in mock_questions]
    question_tags = {q["question"]: q.get("tag", "") for q in mock_questions}
    
    context = "Voc√™ √© um assistente de voz especializado em conduzir pr√©-entrevistas de emprego. Voc√™ √© gentil, educado e fala de forma clara e objetiva. Voc√™ s√≥ fala em portugu√™s do Brasil.\n\n"
    context += "MISS√ÉO: Voc√™ √© um entrevistador de RH. Sua tarefa √© fazer uma pr√©-entrevista com o candidato.\n\n"
    context += "PERGUNTAS OBRIGAT√ìRIAS (fa√ßa uma por vez):\n"
    for i, question in enumerate(interview_questions, 1):
        tag = question_tags.get(question, f"pergunta_{i}")
        context += f"{i}. {question} (tag: {tag})\n"
    
    context += "\nPROTOCOLO DE ENTREVISTA:\n"
    context += "1. Comece AGORA fazendo a primeira pergunta da lista\n"
    context += "2. Fa√ßa apenas UMA pergunta por vez\n"
    context += "3. Aguarde a resposta completa do candidato\n"
    context += "4. Se a resposta n√£o for clara, pe√ßa esclarecimentos\n"
    context += "5. Ap√≥s a resposta, fa√ßa a pr√≥xima pergunta da lista\n"
    context += "6. Quando terminar TODAS as perguntas da lista, siga o protocolo de finaliza√ß√£o\n\n"
    
    context += "PROTOCOLO DE FINALIZA√á√ÉO (OBRIGAT√ìRIO):\n"
    context += "1. Ap√≥s fazer a √∫ltima pergunta e receber a resposta, agrade√ßa ao candidato\n"
    context += "2. Diga: 'Obrigado por participar da pr√©-entrevista. Agora vou processar suas respostas.'\n"
    context += "3. Imediatamente ap√≥s agradecer, voc√™ DEVE:\n"
    context += "   - Gerar um JSON com todas as respostas coletadas\n"
    context += "   - Usar a tool save_response para cada resposta individual\n"
    context += "   - Incluir o JSON completo na sua resposta final\n\n"
    
    context += "FORMATO DO JSON (OBRIGAT√ìRIO):\n"
    context += "- Use as tags das perguntas como chaves\n"
    context += "- Exemplo: {\"nome_completo\": \"Jo√£o Silva\", \"experiencia\": \"3 anos\", \"motivacao\": \"Gosto da empresa\"}\n"
    context += "- Inclua TODAS as respostas coletadas\n\n"
    
    context += "USO DA TOOL save_response:\n"
    context += "- Para cada resposta coletada, chame save_response com:\n"
    context += "  * tag: a tag da pergunta correspondente\n"
    context += "  * response: a resposta do candidato\n"
    context += "- Fa√ßa isso para TODAS as respostas antes de finalizar\n"
    context += "- IMPORTANTE: Use a tool save_response ANTES de gerar o JSON final\n"
    context += "- Exemplo de uso: save_response(tag=\"nome_completo\", response=\"Jo√£o Silva\")\n\n"
    
    context += "IMPORTANTE:\n"
    context += "- N√ÉO fa√ßa outras perguntas al√©m das listadas\n"
    context += "- SEMPRE use a tool save_response para cada resposta\n"
    context += "- SEMPRE gere o JSON final com todas as respostas\n"
    context += "- NUNCA finalize sem usar a tool e gerar o JSON\n"
    context += "- LEMBRE-SE: Voc√™ TEM uma tool chamada save_response - USE-A!\n\n"
    
    context += "INSTRU√á√ÉO FINAL: Comece imediatamente fazendo a primeira pergunta da lista acima. N√£o espere por nenhuma resposta inicial do usu√°rio.\n"
    
    print(f"üìã Contexto gerado ({len(context)} caracteres):")
    print("=" * 80)
    print(context)
    print("=" * 80)
    
    # Simula tool calls esperados
    expected_tool_calls = [
        {
            "functionName": "save_response",
            "args": {
                "tag": "nome_completo",
                "response": "Jo√£o Silva Santos"
            }
        },
        {
            "functionName": "save_response", 
            "args": {
                "tag": "experiencia",
                "response": "5 anos de experi√™ncia na √°rea de desenvolvimento"
            }
        },
        {
            "functionName": "save_response",
            "args": {
                "tag": "motivacao", 
                "response": "Gosto muito da cultura da empresa e das oportunidades de crescimento"
            }
        }
    ]
    
    print("üîß Tool calls esperados:")
    for i, tool_call in enumerate(expected_tool_calls, 1):
        print(f"  {i}. {tool_call['functionName']}(tag=\"{tool_call['args']['tag']}\", response=\"{tool_call['args']['response']}\")")
    
    # Simula JSON final esperado
    expected_json = {
        "nome_completo": "Jo√£o Silva Santos",
        "experiencia": "5 anos de experi√™ncia na √°rea de desenvolvimento", 
        "motivacao": "Gosto muito da cultura da empresa e das oportunidades de crescimento"
    }
    
    print(f"üìÑ JSON final esperado:")
    print(json.dumps(expected_json, indent=2, ensure_ascii=False))
    
    print("\n‚úÖ Teste de setup conclu√≠do!")

async def test_tool_call_processing():
    """Testa o processamento de tool calls"""
    
    print("\nüß™ Testando processamento de tool calls...")
    
    # Simula tool call data
    tool_call_data = {
        "toolCall": {
            "functionName": "save_response",
            "args": {
                "tag": "nome_completo",
                "response": "Jo√£o Silva Santos"
            }
        }
    }
    
    print(f"Tool call data: {json.dumps(tool_call_data, indent=2)}")
    
    # Simula processamento
    tool_call = tool_call_data["toolCall"]
    if tool_call.get("functionName") == "save_response":
        args = tool_call.get("args", {})
        tag = args.get("tag")
        response = args.get("response")
        
        print(f"‚úÖ Tool call processado:")
        print(f"  Tag: {tag}")
        print(f"  Response: {response}")
        print(f"  Timestamp: {datetime.utcnow()}")
    
    print("‚úÖ Teste de tool call conclu√≠do!")

async def test_json_detection():
    """Testa a detec√ß√£o de JSON nas respostas"""
    
    print("\nüß™ Testando detec√ß√£o de JSON...")
    
    import re
    
    # Simula diferentes tipos de resposta
    test_responses = [
        "Obrigado por participar da pr√©-entrevista. Aqui est√£o suas respostas: {\"nome_completo\": \"Jo√£o Silva\", \"experiencia\": \"5 anos\"}",
        "Entrevista finalizada. Respostas coletadas: {\"motivacao\": \"Gosto da empresa\"}",
        "Processando suas respostas... {\"nome_completo\": \"Maria Santos\", \"experiencia\": \"3 anos\", \"motivacao\": \"Oportunidade de crescimento\"}",
        "Apenas uma mensagem normal sem JSON",
        "JSON malformado: {nome_completo: Jo√£o Silva}"
    ]
    
    json_pattern = r'\{[^{}]*"[^"]*"[^{}]*\}'
    
    for i, response in enumerate(test_responses, 1):
        print(f"\nTeste {i}: {response[:50]}...")
        
        json_matches = re.findall(json_pattern, response)
        print(f"  JSON matches encontrados: {len(json_matches)}")
        
        for j, json_str in enumerate(json_matches):
            try:
                parsed_json = json.loads(json_str)
                print(f"  ‚úÖ JSON v√°lido {j+1}: {parsed_json}")
            except json.JSONDecodeError as e:
                print(f"  ‚ùå JSON inv√°lido {j+1}: {e}")
        
        # Check completion indicators
        completion_indicators = [
            "obrigado por participar",
            "pr√©-entrevista foi conclu√≠da", 
            "entrevista foi conclu√≠da",
            "processar suas respostas",
            "finalizada"
        ]
        
        is_completion = any(indicator in response.lower() for indicator in completion_indicators)
        print(f"  √â mensagem de finaliza√ß√£o: {is_completion}")
    
    print("‚úÖ Teste de detec√ß√£o de JSON conclu√≠do!")

async def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ Iniciando testes de debug da funcionalidade de entrevista...")
    
    await test_interview_setup()
    await test_tool_call_processing() 
    await test_json_detection()
    
    print("\nüéâ Todos os testes conclu√≠dos!")
    print("\nüìù Resumo das melhorias implementadas:")
    print("1. ‚úÖ Contexto mais claro e espec√≠fico sobre uso da tool")
    print("2. ‚úÖ Instru√ß√µes expl√≠citas para gerar JSON ao final")
    print("3. ‚úÖ Melhor detec√ß√£o de mensagens de finaliza√ß√£o")
    print("4. ‚úÖ Logs detalhados para debug")
    print("5. ‚úÖ Suporte a texto + √°udio no Gemini")
    print("6. ‚úÖ Tags das perguntas inclu√≠das no contexto")
    print("7. ‚úÖ Verifica√ß√£o de tool calls com logs")

if __name__ == "__main__":
    asyncio.run(main()) 